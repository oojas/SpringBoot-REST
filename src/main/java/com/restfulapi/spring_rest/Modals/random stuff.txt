autowired : Basically means that we set the values.

create a class repo which extends JPARepository<ObjectType,Primary Key>.
Create an object reference for the repo class.
use that to interact with the database. studentRepo -> studentRepo.save(); -> studentRepo.findAll(), -> studentRepo.findById()
RequestParam : is basically which comes after & like &user=ojas&pass=oo. Here in order to get value for user and pass we use request param but
Path Variable is basically getting from the api. Like findByid : so localhost:9000/student/12. 12 is the path variable.\\

One to Many : Means one thing can have a lot of other things : Eg : One school can have a lot of students but students will only have one school.
One to One : Means one thing can only have one other thing. Eg ; One student can only have one student profile. And one student profile can only contain information
about one student.


In Spring Boot, the @JoinColumn annotation is used in JPA (Java Persistence API) to specify the column used for joining an entity association. It’s typically used when defining a foreign key column in a relational mapping between two entities.

Here’s how it works:

One-to-One and Many-to-One Associations: @JoinColumn is placed on the field in the owning entity that holds the reference to another entity.

Specifies the Foreign Key Column: The @JoinColumn annotation allows you to name the foreign key column, customize its properties, and control how it behaves in terms of constraints (e.g., nullable, unique).

Example
In this example, let’s say you have two entities: Student and Address, where each Student has one Address.

java
Copy code
@Entity
public class Student {
    @Id
    private Long id;

    @OneToOne
    @JoinColumn(name = "address_id", referencedColumnName = "id")
    private Address address;
}
Here’s what each parameter does:

name = "address_id" specifies the name of the column in the Student table that stores the foreign key.
referencedColumnName = "id" specifies the column in the Address table to which address_id refers.
Without @JoinColumn, JPA would automatically generate a default foreign key column based on naming conventions, but @JoinColumn gives you control over the column name and its behavior.






You said:
What does JSON Managed Reference and JSON Back reference do in springboot
ChatGPT said:
ChatGPT
In Spring Boot, the @JsonManagedReference and @JsonBackReference annotations are used to manage circular references between entities when using the Jackson library to serialize objects to JSON. They are especially useful in bidirectional relationships, as they help prevent infinite recursion during serialization.

How They Work
@JsonManagedReference: This annotation is placed on the "parent" side of a relationship. It indicates that this is the forward part of the relationship, meaning this side should be serialized in the JSON output.

@JsonBackReference: This is placed on the "child" side of the relationship. It acts as the inverse reference and is ignored during serialization, preventing circular references.

Together, they create a one-directional serialization path, allowing the "parent" to reference the "child" in the JSON output without the child re-referencing the parent, which would otherwise lead to an infinite loop.

Example
Let’s say you have two entities, Author and Book, with a bidirectional one-to-many relationship (one Author has many Books).

java
Copy code
@Entity
public class Author {
    @Id
    private Long id;

    private String name;

    @OneToMany(mappedBy = "author")
    @JsonManagedReference
    private List<Book> books;
}

@Entity
public class Book {
    @Id
    private Long id;

    private String title;

    @ManyToOne
    @JoinColumn(name = "author_id")
    @JsonBackReference
    private Author author;
}
Explanation
@JsonManagedReference on Author.books: Tells Jackson to serialize the books list when serializing an Author object.
@JsonBackReference on Book.author: Tells Jackson to skip serializing the author property of each Book to avoid a circular reference.
JSON Output
When you retrieve an Author, the JSON might look like this:

json
Copy code
{
    "id": 1,
    "name": "Author Name",
    "books": [
        {
            "id": 101,
            "title": "Book Title 1"
        },
        {
            "id": 102,
            "title": "Book Title 2"
        }
    ]
}
When you retrieve a Book, it won’t include the Author details, which prevents circular references.

When to Use
Use @JsonManagedReference and @JsonBackReference when you have bidirectional relationships in your entities, and you need to prevent circular references in your JSON serialization with Jackson.


DTO : DTO provides an abstraction layer which protects your data. Also imporoves performance of your api through pagination.

a record is basically a shorter version of a POJO implementation. in Record you just have to give your parameters as data members. Records are by default final so data cannot be changed once created hence are
immutable. in POJO we have more flexibility when it comes to describing an object or making changes in the data.


StudentDTO : StudentDTO is basically written to hide the student object. The concept of Abstraction has been used here. Like if age is not necessary and in the response age is not provided then i dont need to show
age or other fields which are null. I can show them with their own DTO's.

SchoolDTO : This is written because right now whenever we are fetching the schools we are also getting the students which are inside the school. This can affect the performance of our API. In order to just get the schools and
not the students we will write this.

---------------------------------------------------\\------------------------------------------------

1. @JoinColumn Annotation
@JoinColumn is used to specify the foreign key column in the relational table. This annotation is typically used in @ManyToOne or @OneToOne associations to define the column in the owning entity that refers to the primary key of another entity.

Key Elements of @JoinColumn
name: Specifies the name of the foreign key column in the table.
referencedColumnName: Specifies the name of the column in the referenced table (optional). By default, it refers to the primary key of the referenced entity.
nullable: If false, this makes the foreign key column non-nullable (optional).
unique: Specifies whether the foreign key column should be unique (optional).
Example: Using @JoinColumn in a @ManyToOne Relationship
Imagine you have two entities: Author and Book. Each Book is associated with one Author, and the Book table has a foreign key column author_id referring to the id column in the Author table.

java
Copy code
@Entity
public class Book {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String title;

    @ManyToOne
    @JoinColumn(name = "author_id", nullable = false) // foreign key column
    private Author author;

    // Getters and setters
}
In this example:

@JoinColumn(name = "author_id"): Specifies that the author_id column in the Book table will hold the foreign key referencing the Author entity.
nullable = false: Ensures that each Book must be associated with an Author.
2. @JoinTable Annotation
@JoinTable is typically used in @ManyToMany associations to define a third table (join table) that holds the foreign keys from both associated entities. It maps two primary keys from the associated entities into a join table to represent their relationship.

Key Elements of @JoinTable
name: Specifies the name of the join table.
joinColumns: Defines the foreign key column(s) that reference the primary key of the current entity.
inverseJoinColumns: Defines the foreign key column(s) that reference the primary key of the other entity in the relationship.
Example: Using @JoinTable in a @ManyToMany Relationship
Imagine you have two entities: Student and Course. Each Student can enroll in multiple Courses, and each Course can have multiple Students.

java
Copy code
@Entity
public class Student {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String name;

    @ManyToMany
    @JoinTable(
        name = "student_course",
        joinColumns = @JoinColumn(name = "student_id"),
        inverseJoinColumns = @JoinColumn(name = "course_id")
    )
    private Set<Course> courses;

    // Getters and setters
}
java
Copy code
@Entity
public class Course {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    private String title;

    @ManyToMany(mappedBy = "courses")
    private Set<Student> students;

    // Getters and setters
}
In this example:

@JoinTable(name = "student_course"): Specifies that student_course is the join table linking Student and Course.
joinColumns = @JoinColumn(name = "student_id"): Specifies that student_id in the student_course table references the Student entity’s primary key.
inverseJoinColumns = @JoinColumn(name = "course_id"): Specifies that course_id in the student_course table references the Course entity’s primary key.
The resulting student_course table will contain two columns:

student_id (foreign key referring to the Student table’s primary key)
course_id (foreign key referring to the Course table’s primary key)
Summary
@JoinColumn: Used in @OneToOne or @ManyToOne relationships to specify a foreign key column in the owning entity’s table.
@JoinTable: Used in @ManyToMany relationships to define a join table containing the foreign keys for both associated entities.
These annotations allow you to create flexible and efficient relational mappings that JPA manages, ensuring database integrity and seamless object-relational mapping in your Spring Boot application.
These annotations allow you to create flexible and efficient relational mappings that JPA manages, ensuring database integrity and seamless object-relational mapping in your Spring Boot application.
